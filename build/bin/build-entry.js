var Components = require('../../components.json');
var fs = require('fs');
var render = require('json-templater/string');
var uppercamelcase = require('uppercamelcase');
var path = require('path');

var OUTPUT_PATH = path.join(__dirname, '../../src/index.js');
var IMPORT_TEMPLATE = 'import {{name}} from \'../packages/{{package}}\';';
var INSTALL_COMPONENT_TEMPLATE = '  Vue.component({{name}}.name, {{name}});';
var INSTALL_PLUGIN_TEMPLATE = '  Vue.${{component}} = Vue.prototype.${{component}} = {{name}};';
var MAIN_TEMPLATE = `/* Automatic generated by './build/bin/build-entry.js' */

{{include}}
import DevicePlugin from 'sealui-m/src/plugins/device';
import TipsPlugin from 'sealui-m/src/plugins/tips';
import TitlePlugin from 'sealui-m/src/plugins/title';
import AjaxPlugin from 'sealui-m/src/plugins/ajax';
import TitleDirectives from 'sealui-m/src/directives/title';
const install = function(Vue) {
    /* istanbul ignore if */
  if (install.installed) return;
{{install}}

{{plugin}}
  Vue.$msgbox = Vue.prototype.$msgbox = MessageBox;

  Vue.use(DevicePlugin);
  Vue.use(TipsPlugin);
  Vue.use(TitlePlugin);
  Vue.use(AjaxPlugin);
  Vue.use(TitleDirectives);
};

/* istanbul ignore if */
if (typeof window !== 'undefined' && window.Vue) {
  install(window.Vue);
};

module.exports = {
  version: '{{version}}',
  install,
{{list}}
};
`;

delete Components.font;

var ComponentNames = Object.keys(Components);

var includeComponentTemplate = [];
var installTemplate = [];
var listTemplate = [];
var pluginTemplate = [];

ComponentNames.forEach(name => {
  var componentName = uppercamelcase(name);

  includeComponentTemplate.push(render(IMPORT_TEMPLATE, {
    name: componentName,
    package: name
  }));

  if (componentName == 'Loading' || componentName == 'Toast' || componentName == 'Alert' || componentName == 'Confirm' || componentName == 'Actionsheet'){
    pluginTemplate.push(render(INSTALL_PLUGIN_TEMPLATE,{
        name: componentName,
        component: name
    }))
  }
  if (['Toast','Loading', 'MessageBox', 'Confirm', 'Alert'].indexOf(componentName) === -1) {
    installTemplate.push(render(INSTALL_COMPONENT_TEMPLATE, {
      name: componentName,
      component: name
    }));
  }

  if (componentName !== 'Loading' || componentName !== 'Toast') listTemplate.push(`  ${componentName}`);
});

var template = render(MAIN_TEMPLATE, {
  include: includeComponentTemplate.join('\n'),
  install: installTemplate.join('\n'),
  version: process.env.VERSION || require('../../package.json').version,
  list: listTemplate.join(',\n'),
  plugin: pluginTemplate.join('\n')
});

fs.writeFileSync(OUTPUT_PATH, template);
console.log('[build entry] DONE:', OUTPUT_PATH);
